; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\OBJ\stm32f10x_it.o --asm_dir=..\LIST\ --list_dir=..\LIST\ --depend=..\OBJ\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\USER\INC -IC:\Keil_v4.6\ARM\RV31\INC -IC:\Keil_v4.6\ARM\CMSIS\Include -IC:\Keil_v4.6\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_it.crf ..\..\USER\SRC\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;42     *******************************************************************************/
;;;43     void NMI_Handler(void)
000000  4770              BX       lr
;;;44     {
;;;45     }
;;;46     
                          ENDP

                  HardFault_Handler PROC
;;;53     *******************************************************************************/
;;;54     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;55     {
;;;56       /* Go to infinite loop when Hard Fault exception occurs */
;;;57       while (1)
000004  e7fe              B        |L1.4|
;;;58       {
;;;59       }
;;;60     }
;;;61     
                          ENDP

                  MemManage_Handler PROC
;;;68     *******************************************************************************/
;;;69     void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;70     {
;;;71       /* Go to infinite loop when Memory Manage exception occurs */
;;;72       while (1)
000008  e7fe              B        |L1.8|
;;;73       {
;;;74       }
;;;75     }
;;;76     
                          ENDP

                  BusFault_Handler PROC
;;;83     *******************************************************************************/
;;;84     void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;85     {
;;;86       /* Go to infinite loop when Bus Fault exception occurs */
;;;87       while (1)
00000c  e7fe              B        |L1.12|
;;;88       {
;;;89       }
;;;90     }
;;;91     
                          ENDP

                  UsageFault_Handler PROC
;;;98     *******************************************************************************/
;;;99     void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;100    {
;;;101      /* Go to infinite loop when Usage Fault exception occurs */
;;;102      while (1)
000010  e7fe              B        |L1.16|
;;;103      {
;;;104      }
;;;105    }
;;;106    
                          ENDP

                  SVC_Handler PROC
;;;113    *******************************************************************************/
;;;114    void SVC_Handler(void)
000012  4770              BX       lr
;;;115    {
;;;116    }
;;;117    
                          ENDP

                  DebugMon_Handler PROC
;;;124    *******************************************************************************/
;;;125    void DebugMon_Handler(void)
000014  4770              BX       lr
;;;126    {
;;;127    }
;;;128    
                          ENDP

                  PendSV_Handler PROC
;;;135    *******************************************************************************/
;;;136    void PendSV_Handler(void)
000016  4770              BX       lr
;;;137    {
;;;138    }
;;;139    
                          ENDP

                  SysTick_Handler PROC
;;;146    *******************************************************************************/
;;;147    void SysTick_Handler(void)
000018  4770              BX       lr
;;;148    {
;;;149    }
;;;150    
                          ENDP

                  USB_HP_CAN1_TX_IRQHandler PROC
;;;163    *******************************************************************************/
;;;164    void USB_HP_CAN1_TX_IRQHandler(void)
00001a  4770              BX       lr
;;;165    {
;;;166      //CTR_HP();
;;;167    }
;;;168    
                          ENDP

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;176    *******************************************************************************/
;;;177    void USB_LP_CAN1_RX0_IRQHandler(void)
00001c  4770              BX       lr
;;;178    {
;;;179      //USB_Istr();
;;;180    }
;;;181    #endif /* STM32F10X_CL */
                          ENDP

                  SDIO_IRQHandler PROC
;;;191    *******************************************************************************/
;;;192    void SDIO_IRQHandler(void)
00001e  4770              BX       lr
;;;193    { 
;;;194      /* Process All SDIO Interrupt Sources */
;;;195      //SD_ProcessIRQSrc();
;;;196      
;;;197    }
;;;198    #endif /* STM32F10X_HD | STM32F10X_XL*/
                          ENDP

                  EXTI4_IRQHandler PROC
;;;222    
;;;223    void EXTI4_IRQHandler(void)
000020  b510              PUSH     {r4,lr}
;;;224    { 
;;;225    	EXTI_ClearITPendingBit(EXTI_Line4);  		
000022  2010              MOVS     r0,#0x10
000024  f7fffffe          BL       EXTI_ClearITPendingBit
;;;226    	Vsync_Flag++;
000028  4864              LDR      r0,|L1.444|
00002a  7800              LDRB     r0,[r0,#0]  ; Vsync_Flag
00002c  1c40              ADDS     r0,r0,#1
00002e  4963              LDR      r1,|L1.444|
000030  7008              STRB     r0,[r1,#0]
;;;227    	if(Vsync_Flag==1)    //FIFO写指针复位
000032  4608              MOV      r0,r1
000034  7800              LDRB     r0,[r0,#0]  ; Vsync_Flag
000036  2801              CMP      r0,#1
000038  d118              BNE      |L1.108|
;;;228    	{
;;;229    	    FIFO_WRST=1;
00003a  4961              LDR      r1,|L1.448|
00003c  6008              STR      r0,[r1,#0]
;;;230    		FIFO_WRST=0;
00003e  f04f0000          MOV      r0,#0
000042  4960              LDR      r1,|L1.452|
000044  f8c101b4          STR      r0,[r1,#0x1b4]
;;;231     		for(i=0;i<100;i++);
000048  495f              LDR      r1,|L1.456|
00004a  8008              STRH     r0,[r1,#0]
00004c  e004              B        |L1.88|
                  |L1.78|
00004e  485e              LDR      r0,|L1.456|
000050  8800              LDRH     r0,[r0,#0]  ; i
000052  1c40              ADDS     r0,r0,#1
000054  495c              LDR      r1,|L1.456|
000056  8008              STRH     r0,[r1,#0]
                  |L1.88|
000058  485b              LDR      r0,|L1.456|
00005a  8800              LDRH     r0,[r0,#0]  ; i
00005c  2864              CMP      r0,#0x64
00005e  dbf6              BLT      |L1.78|
;;;232    		FIFO_WRST=1;      
000060  2001              MOVS     r0,#1
000062  4957              LDR      r1,|L1.448|
000064  6008              STR      r0,[r1,#0]
;;;233    		FIFO_WR=1;	   //允许CMOS数据写入FIFO
000066  4959              LDR      r1,|L1.460|
000068  f8c101a8          STR      r0,[r1,#0x1a8]
                  |L1.108|
;;;234    		
;;;235    	}
;;;236    	if(Vsync_Flag==2)
00006c  4853              LDR      r0,|L1.444|
00006e  7800              LDRB     r0,[r0,#0]  ; Vsync_Flag
000070  2802              CMP      r0,#2
000072  d17d              BNE      |L1.368|
;;;237    	{
;;;238    	 	FIFO_WR=0;     //禁止CMOS数据写入FIFO
000074  2000              MOVS     r0,#0
000076  4956              LDR      r1,|L1.464|
000078  6008              STR      r0,[r1,#0]
;;;239    		EXTI->IMR&=~(1<<4);	 //禁止外部中断，准备从FIFO中取数据
00007a  4856              LDR      r0,|L1.468|
00007c  6800              LDR      r0,[r0,#0]
00007e  f0200010          BIC      r0,r0,#0x10
000082  4954              LDR      r1,|L1.468|
000084  6008              STR      r0,[r1,#0]
;;;240    		EXTI->EMR&=~(1<<4);
000086  f1010004          ADD      r0,r1,#4
00008a  6800              LDR      r0,[r0,#0]
00008c  f0200010          BIC      r0,r0,#0x10
000090  f1010104          ADD      r1,r1,#4
000094  6008              STR      r0,[r1,#0]
;;;241    
;;;242    		GPIOA->ODR ^= (1 << 3);
000096  4850              LDR      r0,|L1.472|
000098  6800              LDR      r0,[r0,#0]
00009a  f0800008          EOR      r0,r0,#8
00009e  494e              LDR      r1,|L1.472|
0000a0  6008              STR      r0,[r1,#0]
;;;243    
;;;244    		FIFO_RRST=0;  //FIFO读指针复位 
0000a2  f04f0000          MOV      r0,#0
0000a6  4947              LDR      r1,|L1.452|
0000a8  f8c101bc          STR      r0,[r1,#0x1bc]
;;;245    		FIFO_RCK=0;                
0000ac  494b              LDR      r1,|L1.476|
0000ae  6008              STR      r0,[r1,#0]
;;;246    		FIFO_RCK=1;	
0000b0  f04f0001          MOV      r0,#1
0000b4  6008              STR      r0,[r1,#0]
;;;247    		FIFO_RCK=0;
0000b6  f04f0000          MOV      r0,#0
0000ba  6008              STR      r0,[r1,#0]
;;;248    		FIFO_RCK=1;
0000bc  f04f0001          MOV      r0,#1
0000c0  6008              STR      r0,[r1,#0]
;;;249    	  	FIFO_RRST=1;
0000c2  4947              LDR      r1,|L1.480|
0000c4  6008              STR      r0,[r1,#0]
;;;250    
;;;251    		LCD_WriteReg(0x0003,0x1018);
0000c6  f2410118          MOV      r1,#0x1018
0000ca  f04f0003          MOV      r0,#3
0000ce  f7fffffe          BL       LCD_WriteReg
;;;252    		LCD_WriteReg(0x0050,0x0000); 
0000d2  2100              MOVS     r1,#0
0000d4  2050              MOVS     r0,#0x50
0000d6  f7fffffe          BL       LCD_WriteReg
;;;253    		LCD_WriteReg(0x0051,0x00ef);
0000da  21ef              MOVS     r1,#0xef
0000dc  2051              MOVS     r0,#0x51
0000de  f7fffffe          BL       LCD_WriteReg
;;;254    		LCD_WriteReg(0x0052,0x0000);
0000e2  2100              MOVS     r1,#0
0000e4  2052              MOVS     r0,#0x52
0000e6  f7fffffe          BL       LCD_WriteReg
;;;255    		LCD_WriteReg(0x0053,0x013f);
0000ea  f240113f          MOV      r1,#0x13f
0000ee  2053              MOVS     r0,#0x53
0000f0  f7fffffe          BL       LCD_WriteReg
;;;256    		LCD_WriteReg(0x0020,0x0000);
0000f4  2100              MOVS     r1,#0
0000f6  2020              MOVS     r0,#0x20
0000f8  f7fffffe          BL       LCD_WriteReg
;;;257    		LCD_WriteReg(0x0021,0x013f);   
0000fc  f240113f          MOV      r1,#0x13f
000100  2021              MOVS     r0,#0x21
000102  f7fffffe          BL       LCD_WriteReg
;;;258    		LCD_WriteRAM_Prepare();	
000106  f7fffffe          BL       LCD_WriteRAM_Prepare
;;;259    
;;;260    		FIFO_OE=0;			  //允许FIFO输出
00010a  2000              MOVS     r0,#0
00010c  4935              LDR      r1,|L1.484|
00010e  6008              STR      r0,[r1,#0]
;;;261    		for(i = 0; i < 9600; i ++)	 //该开发板配套的TFT2.8屏最大显示尺寸320*240
000110  492d              LDR      r1,|L1.456|
000112  8008              STRH     r0,[r1,#0]
000114  e036              B        |L1.388|
                  |L1.278|
;;;262    		 {	
;;;263    		 	for(j = 0; j < 8; j ++)
000116  2000              MOVS     r0,#0
000118  4933              LDR      r1,|L1.488|
00011a  8008              STRH     r0,[r1,#0]
00011c  e027              B        |L1.366|
                  |L1.286|
;;;264    			{										
;;;265    				FIFO_RCK=0;					
00011e  2000              MOVS     r0,#0
000120  492e              LDR      r1,|L1.476|
000122  6008              STR      r0,[r1,#0]
;;;266    				FIFO_RCK=1;		 				
000124  f04f0001          MOV      r0,#1
000128  4926              LDR      r1,|L1.452|
00012a  f8c10188          STR      r0,[r1,#0x188]
;;;267    				t1=(0x00ff&GPIOB->IDR);	 				
00012e  482f              LDR      r0,|L1.492|
000130  6800              LDR      r0,[r0,#0]
000132  b2c0              UXTB     r0,r0
000134  492e              LDR      r1,|L1.496|
000136  8008              STRH     r0,[r1,#0]
;;;268    				FIFO_RCK=0;						
000138  f04f0000          MOV      r0,#0
00013c  4927              LDR      r1,|L1.476|
00013e  6008              STR      r0,[r1,#0]
;;;269    				FIFO_RCK=1;						
000140  f04f0001          MOV      r0,#1
000144  491f              LDR      r1,|L1.452|
000146  f8c10188          STR      r0,[r1,#0x188]
;;;270    				t2=(0x00ff&GPIOB->IDR); 				
00014a  4828              LDR      r0,|L1.492|
00014c  6800              LDR      r0,[r0,#0]
00014e  b2c0              UXTB     r0,r0
000150  4928              LDR      r1,|L1.500|
000152  8008              STRH     r0,[r1,#0]
;;;271    				LCD_WR_DATA((t1<<8)|t2);   										   	
000154  8809              LDRH     r1,[r1,#0]  ; t2
000156  4a26              LDR      r2,|L1.496|
000158  7812              LDRB     r2,[r2,#0]  ; t1
00015a  ea412102          ORR      r1,r1,r2,LSL #8
00015e  b288              UXTH     r0,r1
000160  f7fffffe          BL       LCD_WR_DATA
000164  4820              LDR      r0,|L1.488|
000166  8800              LDRH     r0,[r0,#0]            ;263  ; j
000168  1c40              ADDS     r0,r0,#1              ;263
00016a  491f              LDR      r1,|L1.488|
00016c  8008              STRH     r0,[r1,#0]            ;263
                  |L1.366|
00016e  e000              B        |L1.370|
                  |L1.368|
000170  e022              B        |L1.440|
                  |L1.370|
000172  481d              LDR      r0,|L1.488|
000174  8800              LDRH     r0,[r0,#0]            ;263  ; j
000176  2808              CMP      r0,#8                 ;263
000178  dbd1              BLT      |L1.286|
00017a  4813              LDR      r0,|L1.456|
00017c  8800              LDRH     r0,[r0,#0]            ;261  ; i
00017e  1c40              ADDS     r0,r0,#1              ;261
000180  4911              LDR      r1,|L1.456|
000182  8008              STRH     r0,[r1,#0]            ;261
                  |L1.388|
000184  4810              LDR      r0,|L1.456|
000186  8800              LDRH     r0,[r0,#0]            ;261  ; i
000188  f5b05f16          CMP      r0,#0x2580            ;261
00018c  dbc3              BLT      |L1.278|
;;;272    			}
;;;273    		}
;;;274    		FIFO_OE=1;		 	  //禁止FIFO输出
00018e  2001              MOVS     r0,#1
000190  4914              LDR      r1,|L1.484|
000192  6008              STR      r0,[r1,#0]
;;;275    		Vsync_Flag=0;	   
000194  f04f0000          MOV      r0,#0
000198  4908              LDR      r1,|L1.444|
00019a  7008              STRB     r0,[r1,#0]
;;;276    		EXTI->IMR|=(1<<4);	  //允许外部中断，以便接收下帧图像数据
00019c  480d              LDR      r0,|L1.468|
00019e  6800              LDR      r0,[r0,#0]
0001a0  f0400010          ORR      r0,r0,#0x10
0001a4  490b              LDR      r1,|L1.468|
0001a6  6008              STR      r0,[r1,#0]
;;;277    		EXTI->EMR|=(1<<4);
0001a8  f1010004          ADD      r0,r1,#4
0001ac  6800              LDR      r0,[r0,#0]
0001ae  f0400010          ORR      r0,r0,#0x10
0001b2  f1010104          ADD      r1,r1,#4
0001b6  6008              STR      r0,[r1,#0]
                  |L1.440|
;;;278    	} 		
;;;279    		
;;;280    }
0001b8  bd10              POP      {r4,pc}
;;;281    
                          ENDP

0001ba  0000              DCW      0x0000
                  |L1.444|
                          DCD      Vsync_Flag
                  |L1.448|
                          DCD      0x422101b4
                  |L1.452|
                          DCD      0x42210000
                  |L1.456|
                          DCD      i
                  |L1.460|
                          DCD      0x42220000
                  |L1.464|
                          DCD      0x422201a8
                  |L1.468|
                          DCD      0x40010400
                  |L1.472|
                          DCD      0x4001080c
                  |L1.476|
                          DCD      0x42210188
                  |L1.480|
                          DCD      0x422101bc
                  |L1.484|
                          DCD      0x422101b8
                  |L1.488|
                          DCD      j
                  |L1.492|
                          DCD      0x40010c08
                  |L1.496|
                          DCD      ||t1||
                  |L1.500|
                          DCD      ||t2||

                          AREA ||.data||, DATA, ALIGN=1

                  Vsync_Flag
000000  0000              DCB      0x00,0x00
                  i
000002  0000              DCB      0x00,0x00
                  j
000004  0000              DCB      0x00,0x00
                  ||t1||
000006  0000              DCB      0x00,0x00
                  ||t2||
000008  0000              DCB      0x00,0x00
